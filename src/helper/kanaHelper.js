import data from "../../data/kana.json";

/**
 * @returns a boolean
 * @param {*} char the character to check against the Hiragana alphabet
 */
export function isHiragana(char) {
  const hiragana = {
    あ: true,
    い: true,
    う: true,
    え: true,
    お: true,
    か: true,
    き: true,
    く: true,
    け: true,
    こ: true,
    が: true,
    ぎ: true,
    ぐ: true,
    げ: true,
    ご: true,
    さ: true,
    し: true,
    す: true,
    せ: true,
    そ: true,
    ざ: true,
    じ: true,
    ず: true,
    ぜ: true,
    ぞ: true,
    た: true,
    ち: true,
    つ: true,
    て: true,
    と: true,
    だ: true,
    ぢ: true,
    づ: true,
    で: true,
    ど: true,
    な: true,
    に: true,
    ぬ: true,
    ね: true,
    の: true,
    は: true,
    ひ: true,
    ふ: true,
    へ: true,
    ほ: true,
    ば: true,
    び: true,
    ぶ: true,
    べ: true,
    ぼ: true,
    ぱ: true,
    ぴ: true,
    ぷ: true,
    ぺ: true,
    ぽ: true,
    ま: true,
    み: true,
    む: true,
    め: true,
    も: true,
    や: true,
    ゆ: true,
    よ: true,
    ら: true,
    り: true,
    る: true,
    れ: true,
    ろ: true,
    わ: true,
    ゐ: true,
    ゑ: true,
    を: true,
    ん: true,
    "。": true,
    ゃ: true,
    ゅ: true,
    ょ: true,
    っ: true,
    ゝ: true,
    ゞ: true,
  };

  return hiragana[char] ? true : false;
}

/**
 * @returns a boolean
 * @param {*} char the character to check against the Katakana alphabet
 */
export function isKatakana(char) {
  const katakana = {
    ア: true,
    イ: true,
    ウ: true,
    エ: true,
    オ: true,
    カ: true,
    キ: true,
    ク: true,
    ケ: true,
    コ: true,
    ガ: true,
    ギ: true,
    グ: true,
    ゲ: true,
    ゴ: true,
    サ: true,
    シ: true,
    ス: true,
    セ: true,
    ソ: true,
    ザ: true,
    ジ: true,
    ズ: true,
    ゼ: true,
    ゾ: true,
    タ: true,
    チ: true,
    ツ: true,
    テ: true,
    ト: true,
    ダ: true,
    ヂ: true,
    ヅ: true,
    デ: true,
    ド: true,
    ナ: true,
    ニ: true,
    ヌ: true,
    ネ: true,
    ノ: true,
    ハ: true,
    ヒ: true,
    フ: true,
    ヘ: true,
    ホ: true,
    バ: true,
    ビ: true,
    ブ: true,
    ベ: true,
    ボ: true,
    パ: true,
    ピ: true,
    プ: true,
    ペ: true,
    ポ: true,
    マ: true,
    ミ: true,
    ム: true,
    メ: true,
    モ: true,
    ヤ: true,
    ユ: true,
    ヨ: true,
    ラ: true,
    リ: true,
    ル: true,
    レ: true,
    ロ: true,
    ワ: true,
    ヰ: true,
    ヱ: true,
    ヲ: true,
    ン: true,
    ー: true,

    ャ: true,
    ュ: true,
    ョ: true,
    ッ: true,

    ァ: true,
    ィ: true,
    ゥ: true,
    ェ: true,
    ォ: true,

    ヽ: true,
    ヾ: true,
  };

  return katakana[char] ? true : false;
}

/**
 * @returns a boolean
 * @param {*} char the character to check against the punctuation alphabet
 */
export function isPunctuation(char) {
  const punctuation = {
    "。": true,
    "、": true,
    "？": true,
    "！": true,
    "「": true,
    "」": true,
  };

  return punctuation[char] ? true : false;
}

/**
 * swaps hiragana for katakana and vicecersa
 * TODO: handle missing characters? ー
 * TODO: use ascii table offsets?
 * @param {*} character
 */
export function swapKana(character) {
  const chars = {
    ア: "あ",
    イ: "い",
    ウ: "う",
    エ: "え",
    オ: "お",
    カ: "か",
    キ: "き",
    ク: "く",
    ケ: "け",
    コ: "こ",
    ガ: "が",
    ギ: "ぎ",
    グ: "ぐ",
    ゲ: "げ",
    ゴ: "ご",
    サ: "さ",
    シ: "し",
    ス: "す",
    セ: "せ",
    ソ: "そ",
    ザ: "ざ",
    ジ: "じ",
    ズ: "ず",
    ゼ: "ぜ",
    ゾ: "ぞ",
    タ: "た",
    チ: "ち",
    ツ: "つ",
    テ: "て",
    ト: "と",
    ダ: "だ",
    ヂ: "ぢ",
    ヅ: "づ",
    デ: "で",
    ド: "ど",
    ナ: "な",
    ニ: "に",
    ヌ: "ぬ",
    ネ: "ね",
    ノ: "の",
    ハ: "は",
    ヒ: "ひ",
    フ: "ふ",
    ヘ: "へ",
    ホ: "ほ",
    バ: "ば",
    ビ: "び",
    ブ: "ぶ",
    ベ: "べ",
    ボ: "ぼ",
    パ: "ぱ",
    ピ: "ぴ",
    プ: "ぷ",
    ペ: "ぺ",
    ポ: "ぽ",
    マ: "ま",
    ミ: "み",
    ム: "む",
    メ: "め",
    モ: "も",
    ヤ: "や",
    ユ: "ゆ",
    ヨ: "よ",
    ラ: "ら",
    リ: "り",
    ル: "る",
    レ: "れ",
    ロ: "ろ",
    ワ: "わ",
    ヰ: "ゐ",
    ヱ: "ゑ",
    ヲ: "を",
    ン: "ん",
    ャ: "ゃ",
    ュ: "ゅ",
    ョ: "ょ",
    ッ: "っ",
    ヽ: "ゝ",
    ヾ: "ゞ",

    あ: "ア",
    い: "イ",
    う: "ウ",
    え: "エ",
    お: "オ",
    か: "カ",
    き: "キ",
    く: "ク",
    け: "ケ",
    こ: "コ",
    が: "ガ",
    ぎ: "ギ",
    ぐ: "グ",
    げ: "ゲ",
    ご: "ゴ",
    さ: "サ",
    し: "シ",
    す: "ス",
    せ: "セ",
    そ: "ソ",
    ざ: "ザ",
    じ: "ジ",
    ず: "ズ",
    ぜ: "ゼ",
    ぞ: "ゾ",
    た: "タ",
    ち: "チ",
    つ: "ツ",
    て: "テ",
    と: "ト",
    だ: "ダ",
    ぢ: "ヂ",
    づ: "ヅ",
    で: "デ",
    ど: "ド",
    な: "ナ",
    に: "ニ",
    ぬ: "ヌ",
    ね: "ネ",
    の: "ノ",
    は: "ハ",
    ひ: "ヒ",
    ふ: "フ",
    へ: "ヘ",
    ほ: "ホ",
    ば: "バ",
    び: "ビ",
    ぶ: "ブ",
    べ: "ベ",
    ぼ: "ボ",
    ぱ: "パ",
    ぴ: "ピ",
    ぷ: "プ",
    ぺ: "ペ",
    ぽ: "ポ",
    ま: "マ",
    み: "ミ",
    む: "ム",
    め: "メ",
    も: "モ",
    や: "ヤ",
    ゆ: "ユ",
    よ: "ヨ",
    ら: "ラ",
    り: "リ",
    る: "ル",
    れ: "レ",
    ろ: "ロ",
    わ: "ワ",
    ゐ: "ヰ",
    ゑ: "ヱ",
    を: "ヲ",
    ん: "ン",
    ゃ: "ャ",
    ゅ: "ュ",
    ょ: "ョ",
    っ: "ッ",
    ゝ: "ヽ",
    ゞ: "ヾ",

    "。": "。",
  };

  return chars[character] ? chars[character] : "";
}

/**
 * gets the indexes of the character in the hiragana chart
 * @param {*} character
 * @returns {{iConsonant:Number, iVowel:Number}}
 */
export function getConsonantVowel(character) {
  const hiragana = data.hiragana;
  const xMax = Math.floor(hiragana[0].length);
  const yMax = Math.floor(hiragana.length);
  let iConsonant;
  let iVowel;

  for (let vowel = 0; vowel < xMax; vowel++) {
    if (!iConsonant) {
      for (let consonant = 0; consonant < yMax; consonant++) {
        if (hiragana[consonant][vowel] === character) {
          iConsonant = consonant;
          iVowel = vowel;
          break;
        }
      }
    } else {
      break;
    }
  }

  return { iConsonant, iVowel };
}
