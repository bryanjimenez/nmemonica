{"version":3,"file":"232.8ac1df99.js","sources":["./environment-dep-replace.cjs??ruleSet[1].rules[2].use[0]!./src/components/Pages/Settings.tsx"],"sourcesContent":["import { PlusCircleIcon, SyncIcon, XCircleIcon } from \"@primer/octicons-react\";\nimport classNames from \"classnames\";\nimport React, {\n  Suspense,\n  lazy,\n  useCallback,\n  useEffect,\n  useRef,\n  useState,\n} from \"react\";\nimport { useDispatch } from \"react-redux\";\n\nimport { buildAction } from \"../../helper/eventHandlerHelper\";\nimport {\n  getDeviceMotionEventPermission,\n  labelOptions,\n  motionThresholdCondition,\n} from \"../../helper/gameHelper\";\nimport { useConnectSetting } from \"../../hooks/useConnectSettings\";\nimport type { AppDispatch } from \"../../slices\";\nimport {\n  debugToggled,\n  getMemoryStorageStatus,\n  logger,\n  setMotionThreshold,\n  setPersistentStorage,\n  setSwipeThreshold,\n  toggleDarkMode,\n} from \"../../slices/globalSlice\";\nimport { togglePhraseActiveGrp } from \"../../slices/phraseSlice\";\nimport { DebugLevel } from \"../../slices/settingHelper\";\nimport { toggleVocabularyActiveGrp } from \"../../slices/vocabularySlice\";\nimport { NotReady } from \"../Form/NotReady\";\nimport SettingsSwitch from \"../Form/SettingsSwitch\";\nimport \"../../css/Settings.css\";\nimport \"../../css/spin.css\";\nconst SettingsKanji = lazy(() => import(\"../Form/SettingsKanji\"));\nconst SettingsPhrase = lazy(() => import(\"../Form/SettingsPhrase\"));\nconst SettingsVocab = lazy(() => import(\"../Form/SettingsVocab\"));\nconst SettingsOppositeGame = lazy(() => import(\"../Form/SettingsGOpposite\"));\nconst SettingsKanaGame = lazy(() => import(\"../Form/SettingsGKana\"));\nconst SettingsKanjiGame = lazy(() => import(\"../Form/SettingsGKanji\"));\nconst SettingsParticleGame = lazy(() => import(\"../Form/SettingsGParticle\"));\nconst SettingsStats = lazy(() => import(\"../Form/SettingsStats\"));\n\nconst SettingsMeta = {\n  location: \"/settings/\",\n  label: \"Settings\",\n};\n\n// FIXME: getDerivedStateFromError\n/*\nfunction /*static getDerivedStateFromError(error: Error) {\n  const causeMsg =\n    (error.cause !== undefined && [\n      { msg: JSON.stringify(error.cause).replaceAll(\",\", \", \"), css: \"px-4\" },\n    ]) ||\n    [];\n\n  const errorMsgs = [\n    { msg: error.name + \": \" + error.message, css: \"px-2\" },\n    ...causeMsg,\n  ].map((e) => ({ ...e, lvl: DebugLevel.ERROR }));\n\n  // state\n  return {\n    errorMsgs,\n  };\n}\n*/\nfunction componentDidCatch(dispatch: AppDispatch, error: Error) {\n  const cause = error.cause as { code: string; value: unknown };\n\n  dispatch(debugToggled(DebugLevel.DEBUG));\n\n  switch (cause?.code) {\n    case \"StaleVocabActiveGrp\":\n      {\n        const stale = cause.value as string;\n        dispatch(logger(\"Error: \" + error.message, DebugLevel.ERROR));\n        dispatch(\n          logger(\n            \"Group \" + JSON.stringify(stale) + \" Removed\",\n            DebugLevel.ERROR\n          )\n        );\n        dispatch(toggleVocabularyActiveGrp(stale));\n        // FIXME: componentDidCatch setState\n        // this.setState({ errorMsgs: [] });\n      }\n\n      break;\n    case \"StalePhraseActiveGrp\":\n      {\n        const stale = cause.value as string;\n        dispatch(logger(\"Error: \" + error.message, DebugLevel.ERROR));\n        dispatch(\n          logger(\n            \"Group \" + JSON.stringify(stale) + \" Removed\",\n            DebugLevel.ERROR\n          )\n        );\n        dispatch(togglePhraseActiveGrp(stale));\n        // FIXME: componentDidCatch setState\n        // this.setState({ errorMsgs: [] });\n      }\n\n      break;\n    case \"DeviceMotionEvent\":\n      {\n        dispatch(logger(\"Error: \" + error.message, DebugLevel.ERROR));\n        dispatch(setMotionThreshold(0));\n      }\n      break;\n  }\n}\n\nfunction buildMotionListener(\n  dispatch: AppDispatch,\n  motionThreshold: number,\n  setShakeIntensity: React.Dispatch<React.SetStateAction<number | undefined>>\n) {\n  /**\n   * Handler for when device is shaken\n   */\n  return function listener(event: DeviceMotionEvent) {\n    try {\n      motionThresholdCondition(event, motionThreshold, (value) => {\n        setShakeIntensity(Number(value.toFixed(2)));\n        setTimeout(() => {\n          setShakeIntensity(undefined);\n        }, 300);\n      });\n    } catch (error) {\n      if (error instanceof Error) {\n        componentDidCatch(dispatch, error);\n      }\n    }\n  };\n}\n\nexport function collapseExpandToggler(\n  name: boolean,\n  toggleSection: (arg0: (arg1: boolean) => boolean) => void\n) {\n  const icon = name ? (\n    <XCircleIcon className=\"clickable\" size=\"medium\" aria-label=\"collapse\" />\n  ) : (\n    <PlusCircleIcon className=\"clickable\" size=\"medium\" aria-label=\"expand\" />\n  );\n\n  return <h2 onClick={() => toggleSection((t) => !t)}>{icon}</h2>;\n}\n\n/**\n * Classnames for page sections\n */\nconst pageClassName = classNames({ \"mb-5\": true });\n\nexport default function Settings() {\n  const dispatch = useDispatch<AppDispatch>();\n  const motionListener = useRef<\n    ReturnType<typeof buildMotionListener> | undefined\n  >(undefined);\n\n  const { darkMode, swipeThreshold, motionThreshold, memory, debug } =\n    useConnectSetting();\n\n  const [spin, setSpin] = useState(false);\n\n  const [sectionKanji, setSectionKanji] = useState(false);\n  const [sectionVocabulary, setSectionVocabulary] = useState(false);\n  const [sectionPhrase, setSectionPhrase] = useState(false);\n  const [sectionOpposites, setSectionOpposites] = useState(false);\n  const [sectionKana, setSectionKana] = useState(false);\n  const [sectionKanjiGame, setSectionKanjiGame] = useState(false);\n  const [sectionParticle, setSectionParticle] = useState(false);\n  const [sectionStats, setSectionStats] = useState(false);\n  const [swVersion, setSwVersion] = useState(\"\");\n  const [jsVersion, setJsVersion] = useState(\"\");\n  const [bundleVersion, setBundleVersion] = useState(\"\");\n  const [hardRefreshUnavailable, setHardRefreshUnavailable] = useState(false);\n  // const [errorMsgs, setErrorMsgs] = useState<ConsoleMessage[]>([]);\n  const [shakeIntensity, setShakeIntensity] = useState<number | undefined>(0);\n\n  useEffect(\n    () => {\n      void dispatch(getMemoryStorageStatus());\n\n      navigator.serviceWorker.addEventListener(\n        \"message\",\n        swMessageEventListener\n      );\n\n      navigator.serviceWorker.controller?.postMessage({\n        type: \"SW_VERSION\",\n      });\n\n      return () => {\n        navigator.serviceWorker.removeEventListener(\n          \"message\",\n          swMessageEventListener\n        );\n\n        if (motionListener.current) {\n          window.removeEventListener(\"devicemotion\", motionListener.current);\n        }\n      };\n    },\n    [\n      /** On mount and dismount */\n    ]\n  );\n\n  useEffect(() => {\n    if (motionThreshold > 0 && motionListener.current === undefined) {\n      motionListener.current = buildMotionListener(\n        dispatch,\n        motionThreshold,\n        setShakeIntensity\n      );\n\n      getDeviceMotionEventPermission(\n        () => {\n          if (motionListener.current)\n            window.addEventListener(\"devicemotion\", motionListener.current);\n        },\n        (error: Error) => componentDidCatch(dispatch, error)\n      );\n    } else if (motionThreshold === 0 && motionListener.current !== undefined) {\n      window.removeEventListener(\"devicemotion\", motionListener.current);\n      motionListener.current = undefined;\n    } else {\n      if (motionListener.current)\n        window.removeEventListener(\"devicemotion\", motionListener.current);\n\n      motionListener.current = buildMotionListener(\n        dispatch,\n        motionThreshold,\n        setShakeIntensity\n      );\n\n      getDeviceMotionEventPermission(\n        () => {\n          if (motionListener.current)\n            window.addEventListener(\"devicemotion\", motionListener.current);\n        },\n        (error: Error) => componentDidCatch(dispatch, error)\n      );\n    }\n  }, [dispatch, motionThreshold]);\n\n  const swMessageEventListener = useCallback(\n    (event: MessageEvent) => {\n      const { type, error } = event.data as { type: string; error: string };\n      if (type === \"DO_HARD_REFRESH\") {\n        if (error) {\n          dispatch(logger(error, DebugLevel.ERROR));\n        }\n\n        setTimeout(() => {\n          setSpin(false);\n          setHardRefreshUnavailable(true);\n        }, 2000);\n      } else if (type === \"SW_VERSION\") {\n        interface VersionInfo {\n          swVersion: string;\n          jsVersion: string;\n          bundleVersion: string;\n        }\n        const { swVersion, jsVersion, bundleVersion } =\n          event.data as VersionInfo;\n\n        setSwVersion(swVersion);\n        setJsVersion(jsVersion);\n        setBundleVersion(bundleVersion);\n      }\n    },\n    [dispatch]\n  );\n\n  // FIXME: errorMsgs component\n  // if (errorMsgs.length > 0) {\n  //   const minState = logify(this.state);\n  //   const minProps = logify(this.props);\n\n  //   const messages = [\n  //     ...errorMsgs,\n  //     { msg: \"props:\", lvl: DebugLevel.WARN, css: \"px-2\" },\n  //     { msg: minProps, lvl: DebugLevel.WARN, css: \"px-4\" },\n  //     { msg: \"state:\", lvl: DebugLevel.WARN, css: \"px-2\" },\n  //     { msg: minState, lvl: DebugLevel.WARN, css: \"px-4\" },\n  //   ];\n\n  //   return (\n  //     <div>\n  //       <div className=\"d-flex flex-column justify-content-around\">\n  //         <Console messages={messages} />\n  //       </div>\n  //     </div>\n  //   );\n  // }\n\n  return (\n    <div className=\"settings\">\n      <div className=\"d-flex flex-column justify-content-between px-3\">\n        <div className={pageClassName}>\n          <div className=\"d-flex justify-content-between\">\n            <h2>Global</h2>\n            <h2></h2>\n          </div>\n          <div>\n            <div className=\"d-flex flex-row justify-content-between\">\n              <div className=\"column-1 d-flex flex-column justify-content-end\">\n                <div\n                  className={classNames({\n                    \"w-25 d-flex flex-row justify-content-between\": true,\n                    invisible: swipeThreshold === 0,\n                  })}\n                >\n                  <div\n                    className=\"clickable px-2 pb-2\"\n                    onClick={() => {\n                      if (swipeThreshold - 1 <= 0) {\n                        dispatch(setSwipeThreshold(0));\n                      } else {\n                        dispatch(setSwipeThreshold(swipeThreshold - 1));\n                      }\n                    }}\n                  >\n                    -\n                  </div>\n                  <div className=\"px-2\">{swipeThreshold}</div>\n                  <div\n                    className=\"clickable px-2\"\n                    onClick={() =>\n                      dispatch(setSwipeThreshold(swipeThreshold + 1))\n                    }\n                  >\n                    +\n                  </div>\n                </div>\n\n                <div\n                  className={classNames({\n                    \"w-25 d-flex flex-row justify-content-between\": true,\n                    invisible: motionThreshold === 0,\n                  })}\n                >\n                  <div\n                    className=\"clickable px-2 pb-2\"\n                    onClick={() => {\n                      if (motionThreshold - 0.5 <= 0) {\n                        dispatch(setMotionThreshold(0));\n                      } else {\n                        dispatch(setMotionThreshold(motionThreshold - 0.5));\n                      }\n                    }}\n                  >\n                    -\n                  </div>\n                  <div\n                    className={classNames({\n                      \"px-2\": true,\n                      \"correct-color\":\n                        shakeIntensity &&\n                        shakeIntensity > motionThreshold &&\n                        shakeIntensity <= motionThreshold + 1,\n                      \"question-color\":\n                        shakeIntensity &&\n                        shakeIntensity > motionThreshold + 1 &&\n                        shakeIntensity <= motionThreshold + 2,\n                      \"incorrect-color\":\n                        shakeIntensity && shakeIntensity > motionThreshold + 2,\n                    })}\n                  >\n                    {shakeIntensity ?? motionThreshold}\n                  </div>\n                  <div\n                    className=\"clickable px-2\"\n                    onClick={() => {\n                      dispatch(setMotionThreshold(motionThreshold + 0.5));\n                    }}\n                  >\n                    +\n                  </div>\n                </div>\n              </div>\n              <div className=\"column-2\">\n                <div className=\"setting-block\">\n                  <SettingsSwitch\n                    active={darkMode}\n                    action={buildAction(dispatch, toggleDarkMode)}\n                    statusText={(darkMode ? \"Dark\" : \"Light\") + \" Mode\"}\n                  />\n                </div>\n                <div className=\"setting-block\">\n                  <SettingsSwitch\n                    active={swipeThreshold > 0}\n                    action={() => {\n                      swipeThreshold > 0\n                        ? dispatch(setSwipeThreshold(0))\n                        : dispatch(setSwipeThreshold(1));\n                    }}\n                    statusText={\"Touch Swipes\"}\n                  />\n                </div>\n                <div className=\"setting-block\">\n                  <SettingsSwitch\n                    active={motionThreshold > 0}\n                    action={() => {\n                      if (motionThreshold === 0) {\n                        dispatch(setMotionThreshold(6));\n                      } else {\n                        dispatch(setMotionThreshold(0));\n                      }\n                    }}\n                    statusText={\"Accelerometer\"}\n                  />\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n        <div className={pageClassName}>\n          <div className=\"d-flex justify-content-between\">\n            <h2>Phrases</h2>\n            {collapseExpandToggler(sectionPhrase, setSectionPhrase)}\n          </div>\n          {sectionPhrase && (\n            <Suspense\n              fallback={\n                <NotReady addlStyle=\"phrases-settings\" text=\"Loading...\" />\n              }\n            >\n              <SettingsPhrase />\n            </Suspense>\n          )}\n        </div>\n        <div className={pageClassName}>\n          <div className=\"d-flex justify-content-between\">\n            <h2>Vocabulary</h2>\n            {collapseExpandToggler(sectionVocabulary, setSectionVocabulary)}\n          </div>\n          {sectionVocabulary && (\n            <Suspense\n              fallback={\n                <NotReady addlStyle=\"vocabulary-settings\" text=\"Loading...\" />\n              }\n            >\n              <SettingsVocab />\n            </Suspense>\n          )}\n        </div>\n        <div className={pageClassName}>\n          <div className=\"d-flex justify-content-between\">\n            <h2>Kanji</h2>\n            {collapseExpandToggler(sectionKanji, setSectionKanji)}\n          </div>\n          {sectionKanji && (\n            <Suspense\n              fallback={\n                <NotReady addlStyle=\"kanji-settings\" text=\"Loading...\" />\n              }\n            >\n              <SettingsKanji />\n            </Suspense>\n          )}\n        </div>\n        <div className={pageClassName}>\n          <div className=\"d-flex justify-content-between\">\n            <h2>Opposites Game</h2>\n            {collapseExpandToggler(sectionOpposites, setSectionOpposites)}\n          </div>\n          {sectionOpposites && (\n            <Suspense\n              fallback={\n                <NotReady addlStyle=\"opposites-settings\" text=\"Loading...\" />\n              }\n            >\n              <SettingsOppositeGame />\n            </Suspense>\n          )}\n        </div>\n        <div className={pageClassName}>\n          <div className=\"d-flex justify-content-between\">\n            <h2>Kana Game</h2>\n            {collapseExpandToggler(sectionKana, setSectionKana)}\n          </div>\n          {sectionKana && (\n            <Suspense\n              fallback={\n                <NotReady addlStyle=\"kana-settings\" text=\"Loading...\" />\n              }\n            >\n              <SettingsKanaGame />\n            </Suspense>\n          )}\n        </div>\n\n        <div className={pageClassName}>\n          <div className=\"d-flex justify-content-between\">\n            <h2>Kanji Game</h2>\n            {collapseExpandToggler(sectionKanjiGame, setSectionKanjiGame)}\n          </div>\n          {sectionKanjiGame && (\n            <Suspense\n              fallback={\n                <NotReady addlStyle=\"kanji-game-settings\" text=\"Loading...\" />\n              }\n            >\n              <SettingsKanjiGame />\n            </Suspense>\n          )}\n        </div>\n\n        <div className={pageClassName}>\n          <div className=\"d-flex justify-content-between\">\n            <h2>Particles Game</h2>\n            {collapseExpandToggler(sectionParticle, setSectionParticle)}\n          </div>\n          {sectionParticle && (\n            <Suspense\n              fallback={\n                <NotReady addlStyle=\"particle-settings\" text=\"Loading...\" />\n              }\n            >\n              <SettingsParticleGame />\n            </Suspense>\n          )}\n        </div>\n\n        <div className={pageClassName}>\n          <div className=\"d-flex justify-content-between\">\n            <h2>Study Stats</h2>\n            {collapseExpandToggler(sectionStats, setSectionStats)}\n          </div>\n          {sectionStats && (\n            <Suspense\n              fallback={\n                <NotReady addlStyle=\"stats-settings\" text=\"Loading...\" />\n              }\n            >\n              <SettingsStats />\n            </Suspense>\n          )}\n        </div>\n\n        <div className={pageClassName}>\n          <div className=\"d-flex justify-content-between\">\n            <h2>Application</h2>\n          </div>\n          <div className=\"d-flex flex-column flex-sm-row justify-content-between\">\n            <div className=\"column-1\">\n              <div className=\"setting-block mb-2 mt-2\">\n                <div\n                  className=\"d-flex flex-row w-50 w-sm-100 justify-content-between clickable\"\n                  onClick={() => {\n                    setSwVersion(\"\");\n                    setJsVersion(\"\");\n                    setBundleVersion(\"\");\n                    setTimeout(() => {\n                      navigator.serviceWorker.controller?.postMessage({\n                        type: \"SW_VERSION\",\n                      });\n                    }, 1000);\n                  }}\n                >\n                  <div className=\"pe-2\">\n                    <div>{\"swVersion:\"}</div>\n                    <div>{\"jsVersion:\"}</div>\n                    <div>{\"bundleVersion:\"}</div>\n                  </div>\n                  <div>\n                    <div>{swVersion}</div>\n                    <div>{jsVersion}</div>\n                    <div>{bundleVersion}</div>\n                  </div>\n                </div>\n              </div>\n            </div>\n            <div className=\"column-2\">\n              <div className=\"setting-block mb-2\">\n                <SettingsSwitch\n                  active={debug > DebugLevel.OFF}\n                  action={buildAction(dispatch, debugToggled)}\n                  color=\"default\"\n                  statusText={labelOptions(debug, [\n                    \"Debug\",\n                    \"Debug Error\",\n                    \"Debug Warn\",\n                    \"Debug\",\n                  ])}\n                />\n              </div>\n              <div\n                className={classNames({\n                  \"d-flex justify-content-end mb-2\": true,\n                  \"disabled-color\": hardRefreshUnavailable,\n                })}\n              >\n                <p id=\"hard-refresh\" className=\"text-right\">\n                  Hard Refresh\n                </p>\n                <div\n                  className={classNames({\n                    \"spin-a-bit\": spin,\n                  })}\n                  style={{ height: \"24px\" }}\n                  aria-labelledby=\"hard-refresh\"\n                  onClick={() => {\n                    setSpin(true);\n                    setHardRefreshUnavailable(false);\n\n                    setTimeout(() => {\n                      if (spin) {\n                        setSpin(false);\n                        setHardRefreshUnavailable(true);\n                      }\n                    }, 3000);\n\n                    navigator.serviceWorker.controller?.postMessage({\n                      type: \"DO_HARD_REFRESH\",\n                    });\n                  }}\n                >\n                  <SyncIcon\n                    className=\"clickable\"\n                    size={24}\n                    aria-label=\"Hard Refresh\"\n                  />\n                </div>\n              </div>\n\n              <div className=\"setting-block mb-2\">\n                <SettingsSwitch\n                  active={memory.persistent}\n                  action={buildAction(dispatch, setPersistentStorage)}\n                  disabled={memory.persistent}\n                  color=\"default\"\n                  statusText={\n                    memory.persistent\n                      ? `Persistent ${~~(memory.usage / 1024 / 1024)}\n                        /\n                        ${~~(memory.quota / 1024 / 1024)}\n                        MB`\n                      : \"Persistent off\"\n                  }\n                />\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport { SettingsMeta };\n"],"names":[],"mappings":";;AAooBA;AACA"}